name: Deploy Release Build

# Trigger on new version tag
on:
  workflow_dispatch:
    inputs:
      nexus_version:
        description: 'Set the Nexus version manually (optional)'
        required: false
        default: ''
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC

jobs:
  get_latest_version:
    uses: ./.github/workflows/get_nexus_version_latest.yml

  build_deploy_to_registry:
    runs-on: ubuntu-latest
    needs: get_latest_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Enable docker cache to speed-up builds
      - name: Setup Docker build cache
        uses: actions/cache@v4
        with:
          path: |
            /tmp/*.txt
          key: ${{runner.os}}-build-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Parse inputs
      - name: Set Nexus Version
        id: set_nexus_version
        run: |
          if [ "${{ github.event.inputs.nexus_version }}" != "" ]; then
            echo "Using manual Nexus version: ${{ github.event.inputs.nexus_version }}"
            NEXUS_VERSION=${{ github.event.inputs.nexus_version }}
          else
            echo "Using latest Nexus version: ${{ needs.get_latest_version.outputs.nexus_version }}"
            NEXUS_VERSION=${{ needs.get_latest_version.outputs.nexus_version }}
          fi
          
          # Retrieve the previously built version (if any) from a file or GitHub environment variable
          PREVIOUS_VERSION=$(cat /tmp/previous_version.txt || echo "none")
          echo "Previous built version: $PREVIOUS_VERSION"
          
          # Save the latest version to a file for future reference
          echo "$NEXUS_VERSION" > /tmp/previous_version.txt
          
          # Proceed only if there is a new version or a manual input version
          if [ "$NEXUS_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "New version detected: $NEXUS_VERSION"
            echo "new_version=$NEXUS_VERSION" >> $GITHUB_OUTPUT
            echo "new_version_short=${NEXUS_VERSION%-*}" >> $GITHUB_OUTPUT
          else
            echo "No new version detected."
            exit 0
          fi

      # Enable multi-architecture support on build node
      - name: Set up QEMU
        if: steps.set_nexus_version.outputs.new_version
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        if: steps.set_nexus_version.outputs.new_version
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Login to GitHub Container Registry
        if: steps.set_nexus_version.outputs.new_version
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.set_nexus_version.outputs.new_version
        uses: docker/build-push-action@v5
        with:
            context: .
            push: true
            build-args: |
              NEXUS_VERSION=${{ steps.set_nexus_version.outputs.new_version }}
            tags: |
              ghcr.io/${{ github.repository }}:latest
              ghcr.io/${{ github.repository }}:${{ steps.set_nexus_version.outputs.new_version }}
              ghcr.io/${{ github.repository }}:${{ steps.set_nexus_version.outputs.new_version_short }}
            platforms: linux/amd64,linux/arm64,linux/arm/v7
            cache-from: type=gha
            cache-to: type=gha,mode=max
